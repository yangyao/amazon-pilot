syntax = "v1"

info (
	title:   "Amazon Monitor Notification API"
	desc:    "Notification and alert management service"
	author:  "Amazon Pilot Team"
	email:   "team@amazon-pilot.com"
	version: "v1"
)

type (
	// Health check
	PingResponse {
		Status    string `json:"status"`
		Message   string `json:"message"`
		Timestamp int64  `json:"timestamp"`
	}
	HealthResponse {
		Service string `json:"service"`
		Status  string `json:"status"`
		Version string `json:"version"`
		Uptime  int64  `json:"uptime"`
	}
	// Notifications
	GetNotificationsRequest {
		Page   int    `form:"page,default=1"`
		Limit  int    `form:"limit,default=20"`
		Type   string `form:"type,optional"`
		IsRead string `form:"is_read,optional"`
	}
	GetNotificationsResponse {
		Notifications []Notification `json:"notifications"`
		Pagination    Pagination     `json:"pagination"`
	}
	Notification {
		ID        string `json:"id"`
		Type      string `json:"type"`
		Title     string `json:"title"`
		Message   string `json:"message"`
		Severity  string `json:"severity"`
		IsRead    bool   `json:"is_read"`
		CreatedAt string `json:"created_at"`
	}
	Pagination {
		Page       int `json:"page"`
		Limit      int `json:"limit"`
		Total      int `json:"total"`
		TotalPages int `json:"total_pages"`
	}
	MarkReadRequest {
		NotificationID string `path:"notification_id"`
	}
	MarkReadResponse {
		Message string `json:"message"`
	}
)

@server (
	prefix:     /notification
	middleware: RateLimitMiddleware
)
service notification-api {
	@handler ping
	get /ping returns (PingResponse)

	@handler health
	get /health returns (HealthResponse)
}

@server (
	prefix:     /notification
	jwt:        Auth
	middleware: RateLimitMiddleware
)
service notification-api {
	@handler getNotifications
	get /notifications (GetNotificationsRequest) returns (GetNotificationsResponse)

	@handler markNotificationRead
	put /notifications/:notification_id/read (MarkReadRequest) returns (MarkReadResponse)
}

