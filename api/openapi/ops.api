syntax = "v1"

info (
	title:   "Amazon Monitor Ops API"
	desc:    "System operations and monitoring service"
	author:  "Amazon Pilot Team"
	email:   "team@amazon-pilot.com"
	version: "v1"
)

type (
	// System status
	SystemStatusResponse {
		Services []ServiceStatus `json:"services"`
		Database DatabaseStatus  `json:"database"`
		Redis    RedisStatus     `json:"redis"`
		Queue    QueueStatus     `json:"queue"`
		Uptime   int64           `json:"uptime"`
	}
	ServiceStatus {
		Name   string `json:"name"`
		Status string `json:"status"`
		Port   int    `json:"port"`
		Uptime int64  `json:"uptime"`
		Health string `json:"health"`
	}
	DatabaseStatus {
		Status         string          `json:"status"`
		Connections    int             `json:"connections"`
		TotalTables    int             `json:"total_tables"`
		TotalRecords   int64           `json:"total_records"`
		PartitionStats []PartitionInfo `json:"partition_stats"`
	}
	PartitionInfo {
		Name        string `json:"name"`
		RowCount    int64  `json:"row_count"`
		Size        string `json:"size"`
		Unprocessed int64  `json:"unprocessed"`
	}
	RedisStatus {
		Status      string `json:"status"`
		Memory      string `json:"memory"`
		Keys        int64  `json:"keys"`
		Connections int    `json:"connections"`
	}
	QueueStatus {
		Critical QueueInfo `json:"critical"`
		Default  QueueInfo `json:"default"`
		Low      QueueInfo `json:"low"`
	}
	QueueInfo {
		Pending   int64 `json:"pending"`
		Active    int64 `json:"active"`
		Completed int64 `json:"completed"`
		Failed    int64 `json:"failed"`
	}
	// Service management
	RestartServiceRequest {
		ServiceName string `json:"service_name"`
	}
	RestartServiceResponse {
		Success bool   `json:"success"`
		Message string `json:"message"`
	}
	// Logs
	GetLogsRequest {
		ServiceName string `form:"service_name"`
		Lines       int    `form:"lines,default=100"`
		Level       string `form:"level,optional"`
	}
	GetLogsResponse {
		Logs      []LogEntry `json:"logs"`
		TotalSize int64      `json:"total_size"`
	}
	LogEntry {
		Timestamp string `json:"timestamp"`
		Level     string `json:"level"`
		Service   string `json:"service"`
		Message   string `json:"message"`
		Data      string `json:"data,omitempty"`
	}
	// Maintenance
	RunMaintenanceRequest {
		TaskType string `json:"task_type"`
		Options  string `json:"options,optional"`
	}
	RunMaintenanceResponse {
		TaskID  string `json:"task_id"`
		Status  string `json:"status"`
		Message string `json:"message"`
	}
	// Demo data management
	ApifyFetchRequest {
		Asins []string `json:"asins"`
		Force bool     `json:"force,optional"`
	}
	ApifyFetchResponse {
		Success       bool     `json:"success"`
		ProductsCount int      `json:"products_count"`
		Message       string   `json:"message"`
		Products      []string `json:"products,omitempty"`
	}
	// Database operations
	DatabaseQueryRequest {
		Query string `json:"query"`
		Safe  bool   `json:"safe,default=true"`
	}
	DatabaseQueryResponse {
		Success bool                     `json:"success"`
		Rows    []map[string]interface{} `json:"rows,omitempty"`
		Message string                   `json:"message"`
		Count   int                      `json:"count"`
	}
	// Health check
	PingResponse {
		Status    string `json:"status"`
		Message   string `json:"message"`
		Timestamp int64  `json:"timestamp"`
	}
	HealthResponse {
		Service string `json:"service"`
		Status  string `json:"status"`
		Version string `json:"version"`
		Uptime  int64  `json:"uptime"`
	}
)

@server (
	prefix:     /ops
	middleware: RateLimitMiddleware
)
service ops-api {
	@handler ping
	get /ping returns (PingResponse)

	@handler health
	get /health returns (HealthResponse)
}

@server (
	prefix:     /ops
	jwt:        Auth
	middleware: RateLimitMiddleware
)
service ops-api {
	// System monitoring
	@handler getSystemStatus
	get /system/status returns (SystemStatusResponse)

	@handler getLogs
	get /system/logs (GetLogsRequest) returns (GetLogsResponse)

	// Service management
	@handler restartService
	post /services/restart (RestartServiceRequest) returns (RestartServiceResponse)

	// Maintenance tasks
	@handler runMaintenance
	post /maintenance/run (RunMaintenanceRequest) returns (RunMaintenanceResponse)

	// Demo data management
	@handler setupDemoData
	post /demo/setup returns (RunMaintenanceResponse)

	@handler fetchApifyData
	post /demo/apify-fetch (ApifyFetchRequest) returns (ApifyFetchResponse)

	// Database operations
	@handler queryDatabase
	post /database/query (DatabaseQueryRequest) returns (DatabaseQueryResponse)
}

