syntax = "v1"

info (
	title:   "Amazon Monitor Optimization API"
	desc:    "Listing optimization and AI suggestions service"
	author:  "Amazon Pilot Team"
	email:   "team@amazon-pilot.com"
	version: "v1"
)

type (
	// Create optimization task
	CreateOptimizationRequest {
		Title            string `json:"title"`
		Description      string `json:"description,optional"`
		ProductID        string `json:"product_id"`
		OptimizationType string `json:"optimization_type,default=listing"`
		Priority         string `json:"priority,default=medium"`
	}
	CreateOptimizationResponse {
		ID        string `json:"id"`
		Title     string `json:"title"`
		ProductID string `json:"product_id"`
		Status    string `json:"status"`
		CreatedAt string `json:"created_at"`
	}
	// Get optimization task
	GetOptimizationRequest {
		TaskID string `path:"task_id"`
	}
	GetOptimizationResponse {
		ID               string   `json:"id"`
		Title            string   `json:"title"`
		Description      string   `json:"description,omitempty"`
		ProductASIN      string   `json:"product_asin"`
		OptimizationType string   `json:"optimization_type"`
		Priority         string   `json:"priority"`
		Status           string   `json:"status"`
		AISuggestions    []string `json:"ai_suggestions,omitempty"`
		ImpactScore      float64  `json:"impact_score,omitempty"`
		EstimatedHours   int      `json:"estimated_hours,omitempty"`
		CreatedAt        string   `json:"created_at"`
		UpdatedAt        string   `json:"updated_at,omitempty"`
	}
	// List optimization tasks
	ListOptimizationRequest {
		Page     int    `form:"page,default=1"`
		Limit    int    `form:"limit,default=20"`
		Status   string `form:"status,optional"`
		Priority string `form:"priority,optional"`
	}
	ListOptimizationResponse {
		Tasks      []OptimizationTask `json:"tasks"`
		Pagination Pagination         `json:"pagination"`
	}
	OptimizationTask {
		ID               string  `json:"id"`
		Title            string  `json:"title"`
		Description      string  `json:"description,omitempty"`
		ProductASIN      string  `json:"product_asin"`
		OptimizationType string  `json:"optimization_type"`
		Priority         string  `json:"priority"`
		Status           string  `json:"status"`
		ImpactScore      float64 `json:"impact_score,omitempty"`
		EstimatedHours   int     `json:"estimated_hours,omitempty"`
		CreatedAt        string  `json:"created_at"`
		UpdatedAt        string  `json:"updated_at,omitempty"`
	}
	// Get optimization stats
	GetStatsResponse {
		TotalTasks         int     `json:"total_tasks"`
		PendingTasks       int     `json:"pending_tasks"`
		CompletedTasks     int     `json:"completed_tasks"`
		AverageImpactScore float64 `json:"average_impact_score"`
	}
	Pagination {
		Page       int `json:"page"`
		Limit      int `json:"limit"`
		Total      int `json:"total"`
		TotalPages int `json:"total_pages"`
	}
	// Health check
	PingResponse {
		Status    string `json:"status"`
		Message   string `json:"message"`
		Timestamp int64  `json:"timestamp"`
	}
	HealthResponse {
		Service string `json:"service"`
		Status  string `json:"status"`
		Version string `json:"version"`
		Uptime  int64  `json:"uptime"`
	}
)

@server (
	prefix:     /optimization
	middleware: RateLimitMiddleware
)
service optimization-api {
	@handler ping
	get /ping returns (PingResponse)

	@handler health
	get /health returns (HealthResponse)
}

@server (
	prefix:     /optimization
	jwt:        Auth
	middleware: RateLimitMiddleware
)
service optimization-api {
	// Optimization endpoints (JWT required)
	@handler createOptimizationTask
	post /tasks (CreateOptimizationRequest) returns (CreateOptimizationResponse)

	@handler getOptimizationTask
	get /tasks/:task_id (GetOptimizationRequest) returns (GetOptimizationResponse)

	@handler listOptimizationTasks
	get /tasks (ListOptimizationRequest) returns (ListOptimizationResponse)

	@handler getOptimizationStats
	get /stats returns (GetStatsResponse)
}

