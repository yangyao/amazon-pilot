name: Amazon Pilot - Production Deploy

on:
  push:
    branches: [main]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'api/**'
      - 'frontend/**'
      - 'docker/**'
      - 'deployments/**'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all/auth/product/competitor/optimization/frontend/worker/scheduler/dashboard/gateway)'
        required: false
        default: 'all'

env:
  DEPLOY_DIR: /opt/amazon-pilot
  COMPOSE_FILE: deployments/compose/docker-compose.yml
  ENV_FILE: deployments/compose/.env.production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Determine services to build
      id: services
      run: |
        SERVICE_INPUT="${{ github.event.inputs.service }}"
        SERVICE="${SERVICE_INPUT:-all}"

        echo "service=$SERVICE" >> $GITHUB_OUTPUT
        echo "Building service: $SERVICE"

    - name: Build Docker images
      run: |
        SERVICE="${{ steps.services.outputs.service }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        TAG="${GITHUB_SHA:0:8}-$TIMESTAMP"

        echo "Building with tag: $TAG"

        if [[ "$SERVICE" == "all" ]]; then
          echo "🚀 Building all services..."
          docker build -f docker/Dockerfile.auth -t amazon-pilot-auth:$TAG -t amazon-pilot-auth:latest .
          docker build -f docker/Dockerfile.product -t amazon-pilot-product:$TAG -t amazon-pilot-product:latest .
          docker build -f docker/Dockerfile.competitor -t amazon-pilot-competitor:$TAG -t amazon-pilot-competitor:latest .
          docker build -f docker/Dockerfile.optimization -t amazon-pilot-optimization:$TAG -t amazon-pilot-optimization:latest .
          docker build -f docker/Dockerfile.frontend -t amazon-pilot-frontend:$TAG -t amazon-pilot-frontend:latest .
          docker build -f docker/Dockerfile.worker -t amazon-pilot-worker:$TAG -t amazon-pilot-worker:latest .
          docker build -f docker/Dockerfile.scheduler -t amazon-pilot-scheduler:$TAG -t amazon-pilot-scheduler:latest .
          docker build -f docker/Dockerfile.dashboard -t amazon-pilot-dashboard:$TAG -t amazon-pilot-dashboard:latest .
          docker build -f docker/Dockerfile.gateway -t amazon-pilot-gateway:$TAG -t amazon-pilot-gateway:latest .
        else
          echo "🚀 Building $SERVICE service..."
          docker build -f docker/Dockerfile.$SERVICE -t amazon-pilot-$SERVICE:$TAG -t amazon-pilot-$SERVICE:latest .
        fi

        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Save images for deployment
      run: |
        SERVICE="${{ steps.services.outputs.service }}"
        TAG="${{ steps.build.outputs.tag }}"

        if [[ "$SERVICE" == "all" ]]; then
          docker save amazon-pilot-auth:latest | gzip > amazon-pilot-images.tar.gz
          docker save amazon-pilot-product:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-competitor:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-optimization:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-frontend:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-worker:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-scheduler:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-dashboard:latest | gzip >> amazon-pilot-images.tar.gz
          docker save amazon-pilot-gateway:latest | gzip >> amazon-pilot-images.tar.gz
        else
          docker save amazon-pilot-$SERVICE:latest | gzip > amazon-pilot-$SERVICE.tar.gz
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-images-${{ steps.services.outputs.service }}
        path: "*.tar.gz"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: docker-images-${{ needs.build.outputs.service }}

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 300s
        envs: DATABASE_PASSWORD,REDIS_PASSWORD,JWT_SECRET,APIFY_API_TOKEN,OPENAI_API_KEY,GRAFANA_PASSWORD
      env:
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        APIFY_API_TOKEN: ${{ secrets.APIFY_API_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}
        script: |
          set -e

          echo "🚀 Starting Amazon Pilot deployment..."

          # 进入部署目录
          cd ${{ env.DEPLOY_DIR }}

          # 生成生产环境配置
          echo "📝 Generating production environment file..."
          cat > ${{ env.ENV_FILE }} << EOF
          # Amazon Pilot 生产环境配置 - 自动生成
          # 生成时间: $(date)

          # 数据库配置
          DATABASE_DSN=postgresql://postgres:${DATABASE_PASSWORD}@amazon-pilot-postgres:5432/amazon_pilot
          DATABASE_MAX_IDLE_CONNS=10
          DATABASE_MAX_OPEN_CONNS=100
          DATABASE_CONN_MAX_LIFETIME=3600

          # Redis配置
          REDIS_HOST=amazon-pilot-redis
          REDIS_PORT=6379
          REDIS_DB=0
          REDIS_PASSWORD=${REDIS_PASSWORD}

          # API Keys
          APIFY_API_TOKEN=${APIFY_API_TOKEN}
          OPENAI_API_KEY=${OPENAI_API_KEY}

          # JWT配置
          JWT_SECRET=${JWT_SECRET}
          JWT_ACCESS_SECRET=${JWT_SECRET}
          JWT_ACCESS_EXPIRE=86400

          # Worker配置
          WORKER_CONCURRENCY=10
          WORKER_LOG_LEVEL=info

          # Scheduler配置
          SCHEDULER_PRODUCT_UPDATE_INTERVAL=5m

          # 监控配置
          GRAFANA_PASSWORD=${GRAFANA_PASSWORD}

          # 应用配置
          APP_ENV=production
          LOG_LEVEL=info
          ENVIRONMENT=production
          EOF

          # 设置文件权限
          chmod 600 ${{ env.ENV_FILE }}

          # 拉取最新代码
          git pull origin main

          # 备份当前环境
          cp ${{ env.COMPOSE_FILE }} docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)

          SERVICE="${{ needs.build.outputs.service }}"

          echo "📦 Loading Docker images..."
          # 加载新镜像
          for file in /tmp/*.tar.gz; do
            if [ -f "$file" ]; then
              echo "Loading $(basename $file)..."
              gunzip -c "$file" | docker load
              rm "$file"
            fi
          done

          echo "🔄 Performing rolling update..."
          if [[ "$SERVICE" == "all" ]]; then
            # 滚动更新所有服务
            docker-compose -f ${{ env.COMPOSE_FILE }} --env-file ${{ env.ENV_FILE }} up -d --force-recreate --remove-orphans
          else
            # 更新特定服务
            docker-compose -f ${{ env.COMPOSE_FILE }} --env-file ${{ env.ENV_FILE }} up -d --no-deps --force-recreate amazon-pilot-$SERVICE-service
          fi

          echo "⏳ Waiting for services to be ready..."
          sleep 30

          echo "🏥 Health check..."
          # 健康检查
          curl -f http://localhost:8080/health || {
            echo "❌ Health check failed!"
            exit 1
          }

          echo "🧹 Cleanup..."
          # 清理无用的镜像和容器
          docker system prune -f

          echo "✅ Deployment completed successfully!"
          echo "🌐 Service available at: https://amazon-pilot.phpman.top"

    - name: Upload deployment artifacts
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: "*.tar.gz"
        target: "/tmp/"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Amazon Pilot deployment successful!"
          echo "🌐 Available at: https://amazon-pilot.phpman.top"
        else
          echo "❌ Amazon Pilot deployment failed!"
          echo "🔍 Check logs for details"
        fi