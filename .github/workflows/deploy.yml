name: Amazon Pilot - Production Deploy (Clean)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: false
        default: 'all'

env:
  DEPLOY_DIR: /opt/amazon-pilot

jobs:
  # Âπ∂ÂèëÊûÑÂª∫ÊâÄÊúâÊúçÂä°
  build-auth:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Auth Service
      run: |
        docker build -f docker/Dockerfile.auth -t amazon-pilot-auth:latest .
        docker save amazon-pilot-auth:latest | gzip > auth-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: auth-image
        path: auth-image.tar.gz

  build-product:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Product Service
      run: |
        docker build -f docker/Dockerfile.product -t amazon-pilot-product:latest .
        docker save amazon-pilot-product:latest | gzip > product-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: product-image
        path: product-image.tar.gz

  build-competitor:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Competitor Service
      run: |
        docker build -f docker/Dockerfile.competitor -t amazon-pilot-competitor:latest .
        docker save amazon-pilot-competitor:latest | gzip > competitor-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: competitor-image
        path: competitor-image.tar.gz

  build-optimization:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Optimization Service
      run: |
        docker build -f docker/Dockerfile.optimization -t amazon-pilot-optimization:latest .
        docker save amazon-pilot-optimization:latest | gzip > optimization-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: optimization-image
        path: optimization-image.tar.gz

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Frontend Service
      run: |
        docker build -f docker/Dockerfile.frontend -t amazon-pilot-frontend:latest .
        docker save amazon-pilot-frontend:latest | gzip > frontend-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: frontend-image
        path: frontend-image.tar.gz

  build-gateway:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Gateway Service
      run: |
        docker build -f docker/Dockerfile.gateway -t amazon-pilot-gateway:latest .
        docker save amazon-pilot-gateway:latest | gzip > gateway-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: gateway-image
        path: gateway-image.tar.gz

  build-worker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Worker Service
      run: |
        docker build -f docker/Dockerfile.worker -t amazon-pilot-worker:latest .
        docker save amazon-pilot-worker:latest | gzip > worker-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: worker-image
        path: worker-image.tar.gz

  build-scheduler:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Scheduler Service
      run: |
        docker build -f docker/Dockerfile.scheduler -t amazon-pilot-scheduler:latest .
        docker save amazon-pilot-scheduler:latest | gzip > scheduler-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: scheduler-image
        path: scheduler-image.tar.gz

  build-dashboard:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build Dashboard Service
      run: |
        docker build -f docker/Dockerfile.dashboard -t amazon-pilot-dashboard:latest .
        docker save amazon-pilot-dashboard:latest | gzip > dashboard-image.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        name: dashboard-image
        path: dashboard-image.tar.gz

  deploy:
    needs: [build-auth, build-product, build-competitor, build-optimization, build-frontend, build-gateway, build-worker, build-scheduler, build-dashboard]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload Docker images to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "."
        target: "/tmp/amazon-pilot-deploy/"

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        timeout: 600s
        script: |
          export DEPLOY_DIR="/opt/amazon-pilot"
          export DATABASE_DSN="${{ secrets.DATABASE_DSN }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export APIFY_API_TOKEN="${{ secrets.APIFY_API_TOKEN }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}"

          echo "üöÄ Executing server deployment script..."
          cd /opt/amazon-pilot
          ./server-deploy.sh

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "‚úÖ Amazon Pilot deployment successful!"
          echo "üåê Available at: https://amazon-pilot.phpman.top"
        else
          echo "‚ùå Amazon Pilot deployment failed!"
          echo "üîç Check logs for details"
        fi