version: '3.8'

services:
  # Redis 缓存和队列
  redis:
    image: redis:7-alpine
    container_name: amazon-pilot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
    container_name: amazon-pilot-auth
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.product
    container_name: amazon-pilot-product
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
      - APIFY_TOKEN=${APIFY_TOKEN}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Competitor Service
  competitor-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.competitor
    container_name: amazon-pilot-competitor
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
      - APIFY_TOKEN=${APIFY_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Optimization Service
  optimization-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.optimization
    container_name: amazon-pilot-optimization
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.notification
    container_name: amazon-pilot-notification
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: amazon-pilot-frontend
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Asynq Worker (后台任务处理)
  asynq-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: amazon-pilot-worker
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
      - APIFY_TOKEN=${APIFY_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Asynq Scheduler (定时任务调度)
  asynq-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.scheduler
    container_name: amazon-pilot-scheduler
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${SUPABASE_URL}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Asynq Monitor (任务监控界面)
  asynq-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.monitor
    container_name: amazon-pilot-monitor
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: amazon-pilot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: amazon-pilot-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Node Exporter (系统监控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: amazon-pilot-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis Exporter (Redis 监控)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: amazon-pilot-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  amazon-pilot-network:
    driver: bridge
