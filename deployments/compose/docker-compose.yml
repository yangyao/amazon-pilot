version: '3.8'

services:
  # Redis 缓存和队列
  amazon-pilot-redis:
    image: redis:7-alpine
    container_name: amazon-pilot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Auth Service
  amazon-pilot-auth-service:
    image: amazon-pilot-auth:latest
    container_name: amazon-pilot-auth-service
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_DSN=${DATABASE_DSN:-postgresql://postgres:amazon123@amazon-pilot-postgres:5432/amazon_pilot}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME}
      - REDIS_HOST=${REDIS_HOST:-amazon-pilot-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - JWT_SECRET=${JWT_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_EXPIRE=${JWT_ACCESS_EXPIRE:-86400}
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Product Service
  amazon-pilot-product-service:
    image: amazon-pilot-product:latest
    container_name: amazon-pilot-product-service
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_DSN=${DATABASE_DSN:-postgresql://postgres:amazon123@amazon-pilot-postgres:5432/amazon_pilot}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME}
      - REDIS_HOST=${REDIS_HOST:-amazon-pilot-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - JWT_SECRET=${JWT_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_EXPIRE=${JWT_ACCESS_EXPIRE:-86400}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Competitor Service
  amazon-pilot-competitor-service:
    image: amazon-pilot-competitor:latest
    container_name: amazon-pilot-competitor-service
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_DSN=${DATABASE_DSN:-postgresql://postgres:amazon123@amazon-pilot-postgres:5432/amazon_pilot}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME}
      - REDIS_HOST=${REDIS_HOST:-amazon-pilot-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - JWT_SECRET=${JWT_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_EXPIRE=${JWT_ACCESS_EXPIRE:-86400}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Optimization Service
  amazon-pilot-optimization-service:
    image: amazon-pilot-optimization:latest
    container_name: amazon-pilot-optimization-service
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_DSN=${DATABASE_DSN:-postgresql://postgres:amazon123@amazon-pilot-postgres:5432/amazon_pilot}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME}
      - REDIS_HOST=${REDIS_HOST:-amazon-pilot-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - JWT_SECRET=${JWT_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET:-amazon-pilot-jwt-secret-2025}
      - JWT_ACCESS_EXPIRE=${JWT_ACCESS_EXPIRE:-86400}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Gateway Service (API Gateway)
  amazon-pilot-gateway:
    image: amazon-pilot-gateway:latest
    container_name: amazon-pilot-gateway
    ports:
      - "8080:8080"
    depends_on:
      - amazon-pilot-auth-service
      - amazon-pilot-product-service
      - amazon-pilot-competitor-service
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Notification Service
  # Frontend Service
  amazon-pilot-frontend-service:
    image: amazon-pilot-frontend:latest
    container_name: amazon-pilot-frontend-service
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=/api
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"


  # Asynq Worker (后台任务处理)
  amazon-pilot-worker-service:
    image: amazon-pilot-worker:latest
    container_name: amazon-pilot-worker-service
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DATABASE_DSN=${DATABASE_DSN}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY}
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Asynq Scheduler (定时任务调度)
  amazon-pilot-scheduler-service:
    image: amazon-pilot-scheduler:latest
    container_name: amazon-pilot-scheduler-service
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DATABASE_DSN=${DATABASE_DSN}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - SCHEDULER_PRODUCT_UPDATE_INTERVAL=${SCHEDULER_PRODUCT_UPDATE_INTERVAL}
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Asynq Dashboard (异步任务监控界面) - 自建服务
  amazon-pilot-dashboard-service:
    image: amazon-pilot-dashboard:latest
    container_name: amazon-pilot-dashboard-service
    ports:
      - "5555:5555"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - DASHBOARD_PORT=5555
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: amazon-pilot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: amazon-pilot-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Node Exporter (系统监控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: amazon-pilot-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis Exporter (Redis 监控)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: amazon-pilot-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://amazon-pilot-redis:6379
    depends_on:
      - amazon-pilot-redis
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Loki 日志聚合
  loki:
    image: grafana/loki:3.2.0
    container_name: amazon-pilot-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml -log.level=warn
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Promtail 日志收集
  promtail:
    image: grafana/promtail:3.2.0
    container_name: amazon-pilot-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # 访问 Docker API 获取容器名称
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - amazon-pilot-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  amazon-pilot-network:
    driver: bridge
