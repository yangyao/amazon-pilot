// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4

package types

type ApifyFetchRequest struct {
	Asins []string `json:"asins"`
	Force bool     `json:"force,optional"`
}

type ApifyFetchResponse struct {
	Success       bool     `json:"success"`
	ProductsCount int      `json:"products_count"`
	Message       string   `json:"message"`
	Products      []string `json:"products,omitempty"`
}

type DatabaseQueryRequest struct {
	Query string `json:"query"`
	Safe  bool   `json:"safe,default=true"`
}

type DatabaseQueryResponse struct {
	Success bool                     `json:"success"`
	Rows    []map[string]interface{} `json:"rows,omitempty"`
	Message string                   `json:"message"`
	Count   int                      `json:"count"`
}

type DatabaseStatus struct {
	Status         string          `json:"status"`
	Connections    int             `json:"connections"`
	TotalTables    int             `json:"total_tables"`
	TotalRecords   int64           `json:"total_records"`
	PartitionStats []PartitionInfo `json:"partition_stats"`
}

type GetLogsRequest struct {
	ServiceName string `form:"service_name"`
	Lines       int    `form:"lines,default=100"`
	Level       string `form:"level,optional"`
}

type GetLogsResponse struct {
	Logs      []LogEntry `json:"logs"`
	TotalSize int64      `json:"total_size"`
}

type HealthResponse struct {
	Service string `json:"service"`
	Status  string `json:"status"`
	Version string `json:"version"`
	Uptime  int64  `json:"uptime"`
}

type LogEntry struct {
	Timestamp string `json:"timestamp"`
	Level     string `json:"level"`
	Service   string `json:"service"`
	Message   string `json:"message"`
	Data      string `json:"data,omitempty"`
}

type PartitionInfo struct {
	Name        string `json:"name"`
	RowCount    int64  `json:"row_count"`
	Size        string `json:"size"`
	Unprocessed int64  `json:"unprocessed"`
}

type PingResponse struct {
	Status    string `json:"status"`
	Message   string `json:"message"`
	Timestamp int64  `json:"timestamp"`
}

type QueueInfo struct {
	Pending   int64 `json:"pending"`
	Active    int64 `json:"active"`
	Completed int64 `json:"completed"`
	Failed    int64 `json:"failed"`
}

type QueueStatus struct {
	Critical QueueInfo `json:"critical"`
	Default  QueueInfo `json:"default"`
	Low      QueueInfo `json:"low"`
}

type RedisStatus struct {
	Status      string `json:"status"`
	Memory      string `json:"memory"`
	Keys        int64  `json:"keys"`
	Connections int    `json:"connections"`
}

type RestartServiceRequest struct {
	ServiceName string `json:"service_name"`
}

type RestartServiceResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type RunMaintenanceRequest struct {
	TaskType string `json:"task_type"`
	Options  string `json:"options,optional"`
}

type RunMaintenanceResponse struct {
	TaskID  string `json:"task_id"`
	Status  string `json:"status"`
	Message string `json:"message"`
}

type ServiceStatus struct {
	Name   string `json:"name"`
	Status string `json:"status"`
	Port   int    `json:"port"`
	Uptime int64  `json:"uptime"`
	Health string `json:"health"`
}

type SystemStatusResponse struct {
	Services []ServiceStatus `json:"services"`
	Database DatabaseStatus  `json:"database"`
	Redis    RedisStatus     `json:"redis"`
	Queue    QueueStatus     `json:"queue"`
	Uptime   int64           `json:"uptime"`
}
